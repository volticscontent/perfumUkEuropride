/**
 * Script para testar a configura√ß√£o da LOJA 3 (SADERSTORE)
 */

const fs = require('fs');
const path = require('path');

console.log('üß™ Testando configura√ß√£o da LOJA 3 (SADERSTORE)...\n');

// 1. Verificar se o arquivo shopifyStores.ts existe
const shopifyStoresPath = path.join(__dirname, '../lib/shopifyStores.ts');
console.log('üìÅ Verificando shopifyStores.ts...');
if (fs.existsSync(shopifyStoresPath)) {
  console.log('‚úÖ Arquivo shopifyStores.ts existe');
  const content = fs.readFileSync(shopifyStoresPath, 'utf8');
  if (content.includes('ae888e.myshopify.com')) {
    console.log('‚úÖ Dom√≠nio da loja 3 configurado corretamente');
  } else {
    console.log('‚ùå Dom√≠nio da loja 3 n√£o encontrado');
  }
} else {
  console.log('‚ùå Arquivo shopifyStores.ts n√£o existe');
}

// 2. Verificar mapeamento de variantes
const variantMappingPath = path.join(__dirname, '../data/shopify_variant_mapping.json');
console.log('\nüìÅ Verificando mapeamento de variantes...');
if (fs.existsSync(variantMappingPath)) {
  console.log('‚úÖ Arquivo de mapeamento existe');
  try {
    const mapping = JSON.parse(fs.readFileSync(variantMappingPath, 'utf8'));
    const productCount = Object.keys(mapping).length;
    console.log(`‚úÖ ${productCount} produtos mapeados para a loja 3`);
    
    // Mostrar alguns exemplos
    const examples = Object.entries(mapping).slice(0, 3);
    console.log('\nüîç Exemplos de produtos:');
    examples.forEach(([handle, variantId]) => {
      console.log(`   - ${handle}: ${variantId}`);
    });
  } catch (error) {
    console.log('‚ùå Erro ao ler mapeamento:', error.message);
  }
} else {
  console.log('‚ùå Arquivo de mapeamento n√£o existe');
}

// 3. Verificar vari√°veis de ambiente
console.log('\nüîß Verificando vari√°veis de ambiente...');
const envPath = path.join(__dirname, '../.env');
if (fs.existsSync(envPath)) {
  console.log('‚úÖ Arquivo .env existe');
  const envContent = fs.readFileSync(envPath, 'utf8');
  
  if (envContent.includes('SHOPIFY_STORE_3_DOMAIN')) {
    console.log('‚úÖ SHOPIFY_STORE_3_DOMAIN configurado');
  } else {
    console.log('‚ùå SHOPIFY_STORE_3_DOMAIN n√£o encontrado');
  }
  
  if (envContent.includes('SHOPIFY_STORE_3_STOREFRONT_TOKEN')) {
    console.log('‚úÖ SHOPIFY_STORE_3_STOREFRONT_TOKEN configurado');
  } else {
    console.log('‚ùå SHOPIFY_STORE_3_STOREFRONT_TOKEN n√£o encontrado');
  }
} else {
  console.log('‚ùå Arquivo .env n√£o existe');
}

// 4. Verificar arquivos de checkout
console.log('\nüõí Verificando arquivos de checkout...');
const checkoutFiles = [
  '../lib/simpleCheckout.ts',
  '../lib/clientCheckout.ts',
  '../pages/api/create-checkout.ts'
];

checkoutFiles.forEach(file => {
  const filePath = path.join(__dirname, file);
  if (fs.existsSync(filePath)) {
    const content = fs.readFileSync(filePath, 'utf8');
    if (content.includes('ae888e.myshopify.com') || content.includes('SHOPIFY_STORE_3')) {
      console.log(`‚úÖ ${path.basename(file)} configurado para loja 3`);
    } else {
      console.log(`‚ö†Ô∏è  ${path.basename(file)} pode n√£o estar configurado para loja 3`);
    }
  } else {
    console.log(`‚ùå ${path.basename(file)} n√£o existe`);
  }
});

console.log('\nüéØ Teste de configura√ß√£o conclu√≠do!');
console.log('\nüìù Pr√≥ximos passos:');
console.log('   1. Configurar token Storefront v√°lido no .env');
console.log('   2. Testar cria√ß√£o de checkout');
console.log('   3. Verificar funcionamento no navegador');